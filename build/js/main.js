"use strict";

document.addEventListener("DOMContentLoaded", function () {
  var stageTabs = document.querySelectorAll(".predict__tabs-item"),
    stageWraps = document.querySelectorAll(".predict__stage"),
    loseCards = document.querySelectorAll(".predict__lose-card"),
    loseCardsTeams = document.querySelectorAll(".predict__lose-team"),
    winCards = document.querySelectorAll(".predict__win-card"),
    winCardsTeams = document.querySelectorAll(".predict__win-team"),
    predictOverlay = document.querySelector(".predict__overlay"),
    predictPopups = predictOverlay.querySelectorAll(".predict__teams"),
    predictTeams = predictOverlay.querySelectorAll(".predict__teams-item"),
    predictBtns = document.querySelectorAll(".cards-btn"),
    predictList = document.querySelectorAll(".predict__list"),
    predictListItem = document.querySelectorAll(".predict__list-item");

  // console.log(predictBtns)

  var currentCard;
  // let setStatus;

  function showPopup(popups, overlay, index) {
    popups.forEach(function (popup) {
      return popup.classList.remove("_active");
    });
    overlay.classList.add("_active");
    popups[index].classList.add("_active");
    var closeBtn = popups[index].querySelector(".predict__teams-close");
    closeBtn.addEventListener("click", function () {
      overlay.classList.remove("_active");
      popups[index].classList.remove("_active");
    }, {
      once: true
    });
  }
  function setPopupWinLose(overlay, btns, popups, predictBtns) {
    btns.forEach(function (btn, index) {
      btn.addEventListener("click", function (e) {
        var targetClick = true;
        predictBtns.forEach(function (predictBtn) {
          if (predictBtn.classList === e.target.classList) {
            targetClick = false;
          }
          return targetClick;
        });
        if (targetClick) {
          showPopup(popups, overlay, index);
          return currentCard = btn;
        }
      });
    });
  }
  setPopupWinLose(predictOverlay, winCards, predictPopups, predictBtns);
  setPopupWinLose(predictOverlay, loseCards, predictPopups, predictBtns);
  function setPopup(overlay, btns, popups, predictBtns, btnWraps) {
    btns.forEach(function (btn, i) {
      btn.addEventListener("click", function (e) {
        var targetClick = true;
        // console.log(predictBtns)
        predictBtns.forEach(function (predictBtn) {
          console.log(predictBtn.parentElement);
          if (predictBtn.parentElement.classList.contains("_select") === true) {
            targetClick = false;
            console.log("dsadsa");
          }
          if (predictBtn === e.target) {
            targetClick = false;
          }
          return targetClick;
        });
        if (targetClick) {
          var index;
          btnWraps.forEach(function (wrap, i) {
            if (btn.parentElement === wrap) {
              return index = i;
            }
          });
          showPopup(popups, overlay, index);
          return currentCard = btn;
        }
      });
    });
  }
  setPopup(predictOverlay, predictListItem, predictPopups, predictBtns, predictList);
  function setTeam(teams, cardsText, overlay, popups, status) {
    if (status) {
      var cards = [];
      cardsText.forEach(function (item) {
        cards.push(item.parentElement.classList[1]);
      });
      cards.forEach(function (card, i) {
        var key = "selectedTeam-".concat(card, "-").concat(status);
        if (localStorage.getItem(key)) {
          cardsText[i].innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(localStorage.getItem(key));
          cardsText[i].parentElement.parentElement.classList.remove("_select");
          if (cardsText[i].innerText.trim() !== '') {
            cardsText[i].parentElement.parentElement.classList.add("_select");
            cardsText[i].parentElement.parentElement.setAttribute('data-storage', key);
          }
        }
      });
      teams.forEach(function (team) {
        team.addEventListener("click", function (e) {
          // const teamParent = team.parentElement.parentElement;
          var teamName = team.querySelector(".team-name").textContent;
          cards.forEach(function (card, i) {
            if (currentCard === cardsText[i].parentElement) {
              var key = "selectedTeam-".concat(card, "-").concat(status);
              currentCard.parentElement.classList.add("_select");
              currentCard.parentElement.setAttribute('data-storage', key);
              localStorage.setItem(key, "".concat(teamName));
              cardsText[i].innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(teamName);
              overlay.classList.remove("_active");
              popups.forEach(function (popup) {
                return popup.classList.remove("_active");
              });
            }
          });
        });
      });
    } else {
      var cardsTextLists = [];
      cardsText.forEach(function (item) {
        return cardsTextLists.push(item);
      });
      cardsTextLists.forEach(function (list, listIndex) {
        list.childNodes.forEach(function (item, i) {
          var stage = list.getAttribute("data-stage"),
            key = "selectedTeam-".concat(stage, "-card").concat(++i),
            teamTextBlock = item.querySelector(".".concat(item.classList, "-team"));
          teams.forEach(function (team) {
            team.addEventListener("click", function (e) {
              if (item === currentCard) {
                var teamName = team.querySelector(".team-name").textContent;
                currentCard.classList.add("_select");
                currentCard.setAttribute('data-storage', key);
                localStorage.setItem(key, "".concat(teamName));
                // console.log(item)
                teamTextBlock.innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(teamName);
                overlay.classList.remove("_active");
                popups.forEach(function (popup) {
                  return popup.classList.remove("_active");
                });
              }
            });
          });
          if (localStorage.getItem(key)) {
            console.log("key");
            teamTextBlock.innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(localStorage.getItem(key));
            teamTextBlock.parentElement.parentElement.classList.remove("_select");
            if (teamTextBlock.innerText.trim() !== '') {
              teamTextBlock.parentElement.classList.add("_select");
              teamTextBlock.parentElement.setAttribute('data-storage', key);
            }
          }
        });
      });
    }
  }
  setTeam(predictTeams, winCardsTeams, predictOverlay, predictPopups, "win");
  setTeam(predictTeams, loseCardsTeams, predictOverlay, predictPopups, "lose");
  setTeam(predictTeams, predictList, predictOverlay, predictPopups, null);
  function removeTeam(removeBtns, listState) {
    removeBtns.forEach(function (removeBtn) {
      removeBtn.addEventListener("click", function () {
        var btnParent = removeBtn.parentElement.parentElement,
          dataBtn = btnParent.getAttribute("data-storage");

        // console.log(dataBtn)
        if (!dataBtn) {
          btnParent = removeBtn.parentElement;
          dataBtn = btnParent.getAttribute("data-storage");
        }
        localStorage.removeItem(dataBtn);
        btnParent.classList.remove("_select");
      });
    });
  }

  // removeTeam(predictBtns)
  removeTeam(predictBtns);
  stageTabs.forEach(function (tab, tabIndex) {
    tab.addEventListener("click", function (e) {
      stageTabs.forEach(function (tab, i) {
        tab.classList.remove("_active");
      });
      stageWraps.forEach(function (item, stageIndex) {
        item.classList.remove("_active");
        if (tabIndex === stageIndex) {
          item.classList.add("_active");
        }
      });
      e.target.classList.add("_active");
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwic3RhZ2VUYWJzIiwicXVlcnlTZWxlY3RvckFsbCIsInN0YWdlV3JhcHMiLCJsb3NlQ2FyZHMiLCJsb3NlQ2FyZHNUZWFtcyIsIndpbkNhcmRzIiwid2luQ2FyZHNUZWFtcyIsInByZWRpY3RPdmVybGF5IiwicXVlcnlTZWxlY3RvciIsInByZWRpY3RQb3B1cHMiLCJwcmVkaWN0VGVhbXMiLCJwcmVkaWN0QnRucyIsInByZWRpY3RMaXN0IiwicHJlZGljdExpc3RJdGVtIiwiY3VycmVudENhcmQiLCJzaG93UG9wdXAiLCJwb3B1cHMiLCJvdmVybGF5IiwiaW5kZXgiLCJmb3JFYWNoIiwicG9wdXAiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJjbG9zZUJ0biIsIm9uY2UiLCJzZXRQb3B1cFdpbkxvc2UiLCJidG5zIiwiYnRuIiwiZSIsInRhcmdldENsaWNrIiwicHJlZGljdEJ0biIsInRhcmdldCIsInNldFBvcHVwIiwiYnRuV3JhcHMiLCJpIiwiY29uc29sZSIsImxvZyIsInBhcmVudEVsZW1lbnQiLCJjb250YWlucyIsIndyYXAiLCJzZXRUZWFtIiwidGVhbXMiLCJjYXJkc1RleHQiLCJzdGF0dXMiLCJjYXJkcyIsIml0ZW0iLCJwdXNoIiwiY2FyZCIsImtleSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJpbm5lckhUTUwiLCJpbm5lclRleHQiLCJ0cmltIiwic2V0QXR0cmlidXRlIiwidGVhbSIsInRlYW1OYW1lIiwidGV4dENvbnRlbnQiLCJzZXRJdGVtIiwiY2FyZHNUZXh0TGlzdHMiLCJsaXN0IiwibGlzdEluZGV4IiwiY2hpbGROb2RlcyIsInN0YWdlIiwiZ2V0QXR0cmlidXRlIiwidGVhbVRleHRCbG9jayIsInJlbW92ZVRlYW0iLCJyZW1vdmVCdG5zIiwibGlzdFN0YXRlIiwicmVtb3ZlQnRuIiwiYnRuUGFyZW50IiwiZGF0YUJ0biIsInJlbW92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QixJQUFJLENBQUN6QixTQUFTLENBQUNFLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDakM7TUFDSixDQUFDLENBQUM7TUFDRk0sQ0FBQyxDQUFDRyxNQUFNLENBQUNYLFNBQVMsQ0FBQ0UsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUNyQyxDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7QUFDTixDQUFDLENBQUMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpPT57XG4gICAgY29uc3Qgc3RhZ2VUYWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcmVkaWN0X190YWJzLWl0ZW1cIiksXG4gICAgICAgICAgc3RhZ2VXcmFwcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fc3RhZ2VcIiksXG4gICAgICAgICAgbG9zZUNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcmVkaWN0X19sb3NlLWNhcmRcIiksXG4gICAgICAgICAgbG9zZUNhcmRzVGVhbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByZWRpY3RfX2xvc2UtdGVhbVwiKSxcbiAgICAgICAgICB3aW5DYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fd2luLWNhcmRcIiksXG4gICAgICAgICAgd2luQ2FyZHNUZWFtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fd2luLXRlYW1cIiksXG4gICAgICAgICAgcHJlZGljdE92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByZWRpY3RfX292ZXJsYXlcIiksXG4gICAgICAgICAgcHJlZGljdFBvcHVwcyA9IHByZWRpY3RPdmVybGF5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fdGVhbXNcIiksXG4gICAgICAgICAgcHJlZGljdFRlYW1zID0gcHJlZGljdE92ZXJsYXkucXVlcnlTZWxlY3RvckFsbChcIi5wcmVkaWN0X190ZWFtcy1pdGVtXCIpLFxuICAgICAgICAgIHByZWRpY3RCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jYXJkcy1idG5cIiksXG4gICAgICAgICAgcHJlZGljdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByZWRpY3RfX2xpc3RcIiksXG4gICAgICAgICAgcHJlZGljdExpc3RJdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcmVkaWN0X19saXN0LWl0ZW1cIilcblxuICAgIC8vIGNvbnNvbGUubG9nKHByZWRpY3RCdG5zKVxuXG4gICAgbGV0IGN1cnJlbnRDYXJkO1xuICAgIC8vIGxldCBzZXRTdGF0dXM7XG5cblxuICAgIGZ1bmN0aW9uIHNob3dQb3B1cChwb3B1cHMsIG92ZXJsYXksIGluZGV4KXtcbiAgICAgICAgcG9wdXBzLmZvckVhY2gocG9wdXAgPT4gcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcIl9hY3RpdmVcIikpO1xuICAgICAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoXCJfYWN0aXZlXCIpO1xuICAgICAgICBwb3B1cHNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoXCJfYWN0aXZlXCIpO1xuICAgICAgICBjb25zdCBjbG9zZUJ0biA9IHBvcHVwc1tpbmRleF0ucXVlcnlTZWxlY3RvcihcIi5wcmVkaWN0X190ZWFtcy1jbG9zZVwiKTtcbiAgICAgICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIG92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZShcIl9hY3RpdmVcIik7XG4gICAgICAgICAgICBwb3B1cHNbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoXCJfYWN0aXZlXCIpO1xuICAgICAgICB9LCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UG9wdXBXaW5Mb3NlKG92ZXJsYXksIGJ0bnMsIHBvcHVwcywgcHJlZGljdEJ0bnMpIHtcbiAgICAgICAgYnRucy5mb3JFYWNoKChidG4sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldENsaWNrID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHByZWRpY3RCdG5zLmZvckVhY2gocHJlZGljdEJ0biA9PntcbiAgICAgICAgICAgICAgICAgICAgaWYocHJlZGljdEJ0bi5jbGFzc0xpc3QgPT09IGUudGFyZ2V0LmNsYXNzTGlzdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDbGljayA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldENsaWNrXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZih0YXJnZXRDbGljayl7XG4gICAgICAgICAgICAgICAgICAgIHNob3dQb3B1cChwb3B1cHMsIG92ZXJsYXksIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudENhcmQgPSBidG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldFBvcHVwV2luTG9zZShwcmVkaWN0T3ZlcmxheSwgd2luQ2FyZHMsIHByZWRpY3RQb3B1cHMsIHByZWRpY3RCdG5zKVxuICAgIHNldFBvcHVwV2luTG9zZShwcmVkaWN0T3ZlcmxheSwgbG9zZUNhcmRzLCBwcmVkaWN0UG9wdXBzLCBwcmVkaWN0QnRucylcblxuXG4gICAgZnVuY3Rpb24gc2V0UG9wdXAob3ZlcmxheSwgYnRucywgcG9wdXBzLCBwcmVkaWN0QnRucywgYnRuV3JhcHMpIHtcbiAgICAgICAgYnRucy5mb3JFYWNoKChidG4sIGkpID0+IHtcbiAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0Q2xpY2sgPSB0cnVlXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocHJlZGljdEJ0bnMpXG4gICAgICAgICAgICAgICAgcHJlZGljdEJ0bnMuZm9yRWFjaChwcmVkaWN0QnRuID0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwcmVkaWN0QnRuLnBhcmVudEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGlmKHByZWRpY3RCdG4ucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJfc2VsZWN0XCIpID09PSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENsaWNrID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZHNhZHNhXCIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYocHJlZGljdEJ0biA9PT0gZS50YXJnZXQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2xpY2sgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRDbGlja1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgaWYodGFyZ2V0Q2xpY2spe1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGJ0bldyYXBzLmZvckVhY2goKHdyYXAsIGkpID0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoYnRuLnBhcmVudEVsZW1lbnQgPT09IHdyYXApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA9IGlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgc2hvd1BvcHVwKHBvcHVwcywgb3ZlcmxheSwgaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Q2FyZCA9IGJ0blxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRQb3B1cChwcmVkaWN0T3ZlcmxheSwgcHJlZGljdExpc3RJdGVtLCBwcmVkaWN0UG9wdXBzLCBwcmVkaWN0QnRucywgcHJlZGljdExpc3QpXG5cblxuICAgIGZ1bmN0aW9uIHNldFRlYW0odGVhbXMsIGNhcmRzVGV4dCwgb3ZlcmxheSwgcG9wdXBzLCBzdGF0dXMpIHtcbiAgICAgICAgaWYoc3RhdHVzKXtcbiAgICAgICAgICAgIGxldCBjYXJkcyA9IFtdO1xuICAgICAgICAgICAgY2FyZHNUZXh0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgY2FyZHMucHVzaChpdGVtLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0WzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FyZHMuZm9yRWFjaCgoY2FyZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBgc2VsZWN0ZWRUZWFtLSR7Y2FyZH0tJHtzdGF0dXN9YDtcbiAgICAgICAgICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKXtcbiAgICAgICAgICAgICAgICAgICAgY2FyZHNUZXh0W2ldLmlubmVySFRNTCA9IGDQmtC+0LzQsNC90LTQsCA8YnI+ICR7bG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KX1gO1xuICAgICAgICAgICAgICAgICAgICBjYXJkc1RleHRbaV0ucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJfc2VsZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIGlmKGNhcmRzVGV4dFtpXS5pbm5lclRleHQudHJpbSgpICE9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkc1RleHRbaV0ucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJfc2VsZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkc1RleHRbaV0ucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zdG9yYWdlJywga2V5KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRlYW1zLmZvckVhY2goKHRlYW0pID0+IHtcbiAgICAgICAgICAgICAgICB0ZWFtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCB0ZWFtUGFyZW50ID0gdGVhbS5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlYW1OYW1lID0gdGVhbS5xdWVyeVNlbGVjdG9yKFwiLnRlYW0tbmFtZVwiKS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgY2FyZHMuZm9yRWFjaCgoY2FyZCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDYXJkID09PSBjYXJkc1RleHRbaV0ucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBrZXkgPSBgc2VsZWN0ZWRUZWFtLSR7Y2FyZH0tJHtzdGF0dXN9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2FyZC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJfc2VsZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENhcmQucGFyZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RvcmFnZScsIGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIGAke3RlYW1OYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRzVGV4dFtpXS5pbm5lckhUTUwgPSBg0JrQvtC80LDQvdC00LAgPGJyPiAke3RlYW1OYW1lfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cHMuZm9yRWFjaChwb3B1cCA9PiBwb3B1cC5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGxldCBjYXJkc1RleHRMaXN0cyA9IFtdXG4gICAgICAgICAgICBjYXJkc1RleHQuZm9yRWFjaChpdGVtID0+e1xuICAgICAgICAgICAgICAgIHJldHVybiBjYXJkc1RleHRMaXN0cy5wdXNoKGl0ZW0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY2FyZHNUZXh0TGlzdHMuZm9yRWFjaCgobGlzdCwgbGlzdEluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgbGlzdC5jaGlsZE5vZGVzLmZvckVhY2goKGl0ZW0sIGkpID0+e1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhZ2UgPSBsaXN0LmdldEF0dHJpYnV0ZShcImRhdGEtc3RhZ2VcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBgc2VsZWN0ZWRUZWFtLSR7c3RhZ2V9LWNhcmQkeysraX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVhbVRleHRCbG9jayA9IGl0ZW0ucXVlcnlTZWxlY3RvcihgLiR7aXRlbS5jbGFzc0xpc3R9LXRlYW1gKVxuICAgICAgICAgICAgICAgICAgICB0ZWFtcy5mb3JFYWNoKCh0ZWFtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWFtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0gPT09IGN1cnJlbnRDYXJkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVhbU5hbWUgPSB0ZWFtLnF1ZXJ5U2VsZWN0b3IoXCIudGVhbS1uYW1lXCIpLnRleHRDb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDYXJkLmNsYXNzTGlzdC5hZGQoXCJfc2VsZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDYXJkLnNldEF0dHJpYnV0ZSgnZGF0YS1zdG9yYWdlJywga2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIGAke3RlYW1OYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpdGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZWFtVGV4dEJsb2NrLmlubmVySFRNTCA9IGDQmtC+0LzQsNC90LTQsCA8YnI+ICR7dGVhbU5hbWV9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBzLmZvckVhY2gocG9wdXAgPT4gcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcIl9hY3RpdmVcIikpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwia2V5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWFtVGV4dEJsb2NrLmlubmVySFRNTCA9IGDQmtC+0LzQsNC90LTQsCA8YnI+ICR7bG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVhbVRleHRCbG9jay5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIl9zZWxlY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRlYW1UZXh0QmxvY2suaW5uZXJUZXh0LnRyaW0oKSAhPT0gJycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlYW1UZXh0QmxvY2sucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiX3NlbGVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlYW1UZXh0QmxvY2sucGFyZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RvcmFnZScsIGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG5cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cbiAgICBzZXRUZWFtKHByZWRpY3RUZWFtcywgd2luQ2FyZHNUZWFtcywgcHJlZGljdE92ZXJsYXksIHByZWRpY3RQb3B1cHMsIFwid2luXCIpO1xuICAgIHNldFRlYW0ocHJlZGljdFRlYW1zLCBsb3NlQ2FyZHNUZWFtcywgcHJlZGljdE92ZXJsYXksIHByZWRpY3RQb3B1cHMsIFwibG9zZVwiKTtcbiAgICBzZXRUZWFtKHByZWRpY3RUZWFtcywgcHJlZGljdExpc3QsIHByZWRpY3RPdmVybGF5LCBwcmVkaWN0UG9wdXBzLCBudWxsKTtcblxuICAgIGZ1bmN0aW9uIHJlbW92ZVRlYW0ocmVtb3ZlQnRucywgbGlzdFN0YXRlKXtcbiAgICAgICAgcmVtb3ZlQnRucy5mb3JFYWNoKHJlbW92ZUJ0biA9PntcbiAgICAgICAgICAgIHJlbW92ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT57XG4gICAgICAgICAgICAgICAgbGV0IGJ0blBhcmVudCA9ICByZW1vdmVCdG4ucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhQnRuID0gYnRuUGFyZW50LmdldEF0dHJpYnV0ZShcImRhdGEtc3RvcmFnZVwiKVxuXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YUJ0bilcbiAgICAgICAgICAgICAgICBpZighZGF0YUJ0bil7XG4gICAgICAgICAgICAgICAgICAgIGJ0blBhcmVudCA9IHJlbW92ZUJ0bi5wYXJlbnRFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIGRhdGFCdG4gPSBidG5QYXJlbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdG9yYWdlXCIpXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZGF0YUJ0bilcbiAgICAgICAgICAgICAgICBidG5QYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShcIl9zZWxlY3RcIilcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyByZW1vdmVUZWFtKHByZWRpY3RCdG5zKVxuICAgIHJlbW92ZVRlYW0ocHJlZGljdEJ0bnMpXG5cbiAgICBzdGFnZVRhYnMuZm9yRWFjaCgodGFiLCB0YWJJbmRleCkgPT57XG4gICAgICAgIHRhYi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+e1xuICAgICAgICAgICAgc3RhZ2VUYWJzLmZvckVhY2goKHRhYiwgaSkgPT57XG4gICAgICAgICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHN0YWdlV3JhcHMuZm9yRWFjaCgoaXRlbSwgc3RhZ2VJbmRleCkgPT57XG4gICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIGlmKHRhYkluZGV4ID09PSBzdGFnZUluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwiX2FjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiX2FjdGl2ZVwiKVxuICAgICAgICB9KVxuICAgIH0pXG59KSJdfQ==
