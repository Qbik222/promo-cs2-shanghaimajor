"use strict";

document.addEventListener("DOMContentLoaded", function () {
  var stageTabs = document.querySelectorAll(".predict__tabs-item"),
    stageWraps = document.querySelectorAll(".predict__stage"),
    loseCards = document.querySelectorAll(".predict__lose-card"),
    loseCardsTeams = document.querySelectorAll(".predict__lose-team"),
    winCards = document.querySelectorAll(".predict__win-card"),
    winCardsTeams = document.querySelectorAll(".predict__win-team"),
    predictOverlay = document.querySelector(".predict__overlay"),
    predictPopups = predictOverlay.querySelectorAll(".predict__teams"),
    predictTeams = predictOverlay.querySelectorAll(".predict__teams-item"),
    predictBtns = document.querySelectorAll(".cards-btn"),
    predictList = document.querySelectorAll(".predict__list"),
    predictListItem = document.querySelectorAll(".predict__list-item");

  // console.log(predictBtns)

  var currentCard;
  // let setStatus;

  function setPopup(overlay, btns, popups, btnWraps) {
    btns.forEach(function (btn, i) {
      btn.addEventListener("click", function (e) {
        var predictBtns = document.querySelectorAll(".cards-btn"),
          targetClick = true;
        // console.log(predictBtns)
        predictBtns.forEach(function (predictBtn) {
          var storageData = e.target.parentElement.getAttribute("data-storage");
          if (predictBtn === e.target && storageData !== null) {
            targetClick = false;
            e.target.parentElement.removeAttribute("data-storage");
          }
          return targetClick;
        });
        if (targetClick) {
          var index;
          btnWraps.forEach(function (wrap, i) {
            if (btn.parentElement === wrap) {
              return index = i;
            }
          });
          showPopup(popups, overlay, index);
          return currentCard = btn;
        }
      });
    });
  }
  setPopup(predictOverlay, predictListItem, predictPopups, predictList);
  function showPopup(popups, overlay, index) {
    popups.forEach(function (popup) {
      return popup.classList.remove("_active");
    });
    overlay.classList.add("_active");
    popups[index].classList.add("_active");
    document.body.style.overflow = "hidden";
    var closeBtn = popups[index].querySelector(".predict__teams-close");
    closeBtn.addEventListener("click", function () {
      overlay.classList.remove("_active");
      popups[index].classList.remove("_active");
      document.body.style.overflow = "auto";
    }, {
      once: true
    });
  }
  function setPopupWinLose(overlay, btns, popups, predictBtns) {
    btns.forEach(function (btn, index) {
      btn.addEventListener("click", function (e) {
        var targetClick = true;
        predictBtns.forEach(function (predictBtn) {
          if (predictBtn.classList === e.target.classList) {
            targetClick = false;
          }
          return targetClick;
        });
        if (targetClick) {
          showPopup(popups, overlay, index);
          return currentCard = btn;
        }
      });
    });
  }
  setPopupWinLose(predictOverlay, winCards, predictPopups, predictBtns);
  setPopupWinLose(predictOverlay, loseCards, predictPopups, predictBtns);
  function setTeam(teams, cardsText, overlay, popups, status) {
    if (status) {
      var cards = [];
      cardsText.forEach(function (item) {
        cards.push(item.parentElement.classList[1]);
      });
      cards.forEach(function (card, i) {
        var key = "selectedTeam-".concat(card, "-").concat(status);
        if (localStorage.getItem(key)) {
          cardsText[i].innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(localStorage.getItem(key));
          cardsText[i].parentElement.parentElement.classList.remove("_select");
          if (cardsText[i].innerText.trim() !== '') {
            cardsText[i].parentElement.parentElement.classList.add("_select");
            cardsText[i].parentElement.parentElement.setAttribute('data-storage', key);
          }
        }
      });
      teams.forEach(function (team) {
        team.addEventListener("click", function (e) {
          // const teamParent = team.parentElement.parentElement;
          var teamName = team.querySelector(".team-name").textContent;
          cards.forEach(function (card, i) {
            if (currentCard === cardsText[i].parentElement) {
              var key = "selectedTeam-".concat(card, "-").concat(status);
              currentCard.parentElement.classList.add("_select");
              currentCard.parentElement.setAttribute('data-storage', key);
              localStorage.setItem(key, "".concat(teamName));
              cardsText[i].innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(teamName);
              overlay.classList.remove("_active");
              popups.forEach(function (popup) {
                return popup.classList.remove("_active");
              });
              document.body.style.overflow = "auto";
            }
          });
        });
      });
    } else {
      var cardsTextLists = [];
      cardsText.forEach(function (item) {
        return cardsTextLists.push(item);
      });
      cardsTextLists.forEach(function (list, listIndex) {
        list.childNodes.forEach(function (item, i) {
          var stage = list.getAttribute("data-stage"),
            key = "selectedTeam-".concat(stage, "-card").concat(++i),
            teamTextBlock = item.querySelector(".".concat(item.classList[0], "-team"));
          teams.forEach(function (team) {
            team.addEventListener("click", function (e) {
              if (item === currentCard) {
                var teamName = team.querySelector(".team-name").textContent;
                currentCard.classList.add("_select");
                currentCard.setAttribute('data-storage', key);
                localStorage.setItem(key, "".concat(teamName));
                // console.log(item)
                teamTextBlock.innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(teamName);
                overlay.classList.remove("_active");
                popups.forEach(function (popup) {
                  return popup.classList.remove("_active");
                });
                document.body.style.overflow = "auto";
              }
            });
          });
          if (localStorage.getItem(key)) {
            console.log("key");
            teamTextBlock.innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(localStorage.getItem(key));
            teamTextBlock.parentElement.parentElement.classList.remove("_select");
            if (teamTextBlock.innerText.trim() !== '') {
              teamTextBlock.parentElement.classList.add("_select");
              teamTextBlock.parentElement.setAttribute('data-storage', key);
            }
          }
        });
      });
    }
  }
  setTeam(predictTeams, winCardsTeams, predictOverlay, predictPopups, "win");
  setTeam(predictTeams, loseCardsTeams, predictOverlay, predictPopups, "lose");
  setTeam(predictTeams, predictList, predictOverlay, predictPopups, null);
  function removeTeam(removeBtns, listState) {
    removeBtns.forEach(function (removeBtn) {
      removeBtn.addEventListener("click", function () {
        var btnParent = removeBtn.parentElement.parentElement,
          dataBtn = btnParent.getAttribute("data-storage");

        // console.log(dataBtn)
        if (!dataBtn) {
          btnParent = removeBtn.parentElement;
          dataBtn = btnParent.getAttribute("data-storage");
        }
        localStorage.removeItem(dataBtn);
        btnParent.classList.remove("_select");
      });
    });
  }

  // removeTeam(predictBtns)
  removeTeam(predictBtns);
  stageTabs.forEach(function (tab, tabIndex) {
    tab.addEventListener("click", function (e) {
      stageTabs.forEach(function (tab, i) {
        tab.classList.remove("_active");
      });
      stageWraps.forEach(function (item, stageIndex) {
        item.classList.remove("_active");
        if (tabIndex === stageIndex) {
          item.classList.add("_active");
          if (item.classList.contains("stage3")) {
            item.parentElement.classList.add('stage3');
          } else {
            item.parentElement.classList.remove('stage3');
          }
        }
      });
      e.target.classList.add("_active");
    });
  });

  // countdown timer
  function startCountdown(element) {
    var targetDate = new Date(element.getAttribute('data-target-date'));
    function updateCountdown() {
      var now = new Date(),
        difference = targetDate - now;
      if (difference <= 0) {
        element.querySelector('.predict__info-lock-countdown').textContent = "time over";
        clearInterval(countdownInterval);
        return;
      }
      var days = Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours = Math.floor(difference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),
        minutes = Math.floor(difference % (1000 * 60 * 60) / (1000 * 60));
      element.querySelector('.predict__info-lock-days').textContent = days;
      element.querySelector('.predict__info-lock-hours').textContent = hours;
      element.querySelector('.predict__info-lock-minutes').textContent = minutes;
    }
    var countdownInterval = setInterval(updateCountdown, 60000);
    updateCountdown();
  }
  document.querySelectorAll('.predict__info-lock-countdown').forEach(startCountdown);

  // custom horizontal scroll
  var scrollBar = document.querySelector(".table__scrollbar"),
    scrollBarThumb = document.querySelector(".table__scrollbar-thumb"),
    scrollElem = document.querySelector('.table__wrap-scroll'),
    scrollContainer = document.querySelector('.table__wrap');
  var scrollBarWidth = scrollContainer.clientWidth - 50,
    scrollBarThumbWidth;
  if (scrollElem.clientWidth <= scrollContainer.clientWidth) {
    scrollBar.style.display = "none";
  } else {
    scrollBar.style.display = "block";
    scrollBarThumbWidth = (scrollBarWidth * scrollContainer.clientWidth - 50) / scrollElem.scrollWidth;
    scrollBarThumb.style.width = "".concat(scrollBarThumbWidth, "px");
    scrollBar.style.width = "".concat(scrollBarWidth, "px");
  }
  var currentScrollDistance = 0;
  scrollContainer.addEventListener("scroll", function () {
    currentScrollDistance = scrollContainer.scrollLeft * 100 / scrollContainer.clientWidth;
    scrollBarThumb.style.left = "".concat(scrollBarThumbWidth / 100 * currentScrollDistance - 5, "px");
  });
  // typewright text anim
  function dynamicTypewriter(element, speed, callback) {
    var textArray = element.textContent.trim().split(' ');
    var litArr = textArray.join(' ').split(/(\s+)/).filter(function (_char) {
      return _char.trim() !== '' || _char === ' ';
    });
    var wordIndex = 0;
    var charIndex = 0;
    var currentText = '';
    element.classList.add("_opacity");
    function typeWord() {
      if (wordIndex === litArr.length) {
        element.classList.remove('typewriter-cursor');
        return;
      }
      var currentWord = textArray[wordIndex];
      if (currentWord === undefined) return;
      if (charIndex < currentWord.length) {
        currentText += currentWord.charAt(charIndex);
        element.innerText = currentText;
        charIndex++;
        setTimeout(typeWord, speed);
      } else {
        currentText += ' ';
        element.innerText = currentText;
        charIndex = 0;
        wordIndex++;
        setTimeout(typeWord, speed);
      }
    }
    element.classList.add('typewriter-cursor');
    typeWord();
  }
  function observeElements(typeElems) {
    var options = {
      root: null,
      threshold: 0.5
    };
    var observer = new IntersectionObserver(function (entries, observer) {
      entries.forEach(function (entry, i) {
        if (entry.isIntersecting) {
          dynamicTypewriter(entry.target, 35, function () {});
          observer.unobserve(entry.target);
        }
      });
    }, options);
    typeElems.forEach(function (item) {
      observer.observe(item);
    });
  }
  var typeAnim = document.querySelectorAll('.type-anim');
  observeElements(typeAnim);
  document.querySelector(".dark-btn").addEventListener("click", function () {
    document.body.classList.toggle("dark");
  });
  var arr = {
    a: 1,
    b: 2,
    c: 3,
    g: 4
  };
  for (var item in arr) {
    console.log(arr[item]);
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
