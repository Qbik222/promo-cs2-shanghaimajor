"use strict";

document.addEventListener("DOMContentLoaded", function () {
  window.addEventListener('orientationchange', function () {
    return window.location.reload();
  });
  var stageTabs = document.querySelectorAll(".predict__tabs-item"),
    stageWraps = document.querySelectorAll(".predict__stage"),
    loseCards = document.querySelectorAll(".predict__lose-card"),
    loseCardsTeams = document.querySelectorAll(".predict__lose-team"),
    winCards = document.querySelectorAll(".predict__win-card"),
    winCardsTeams = document.querySelectorAll(".predict__win-team"),
    predictOverlay = document.querySelector(".predict__overlay"),
    predictPopups = predictOverlay.querySelectorAll(".predict__teams"),
    predictTeams = predictOverlay.querySelectorAll(".predict__teams-item"),
    predictBtns = document.querySelectorAll(".cards-btn"),
    predictList = document.querySelectorAll(".predict__list"),
    predictListItem = document.querySelectorAll(".predict__list-item");

  // console.log(predictBtns)

  var currentCard;
  // let setStatus;

  function setPopup(overlay, btns, popups, btnWraps) {
    btns.forEach(function (btn, i) {
      btn.addEventListener("click", function (e) {
        var predictBtns = document.querySelectorAll(".cards-btn"),
          targetClick = true;
        // console.log(predictBtns)
        predictBtns.forEach(function (predictBtn) {
          var storageData = e.target.parentElement.getAttribute("data-storage");
          if (predictBtn === e.target && storageData !== null) {
            targetClick = false;
            e.target.parentElement.removeAttribute("data-storage");
          }
          return targetClick;
        });
        if (targetClick) {
          var index;
          btnWraps.forEach(function (wrap, i) {
            if (btn.parentElement === wrap) {
              return index = i;
            }
          });
          showPopup(popups, overlay, index);
          return currentCard = btn;
        }
      });
    });
  }
  setPopup(predictOverlay, predictListItem, predictPopups, predictList);
  function showPopup(popups, overlay, index) {
    popups.forEach(function (popup) {
      return popup.classList.remove("_active");
    });
    overlay.classList.add("_active");
    popups[index].classList.add("_active");
    document.body.style.overflow = "hidden";
    var closeBtn = popups[index].querySelector(".predict__teams-close");
    closeBtn.addEventListener("click", function () {
      overlay.classList.remove("_active");
      popups[index].classList.remove("_active");
      document.body.style.overflow = "auto";
    }, {
      once: true
    });
  }
  function setPopupWinLose(overlay, btns, popups, predictBtns) {
    btns.forEach(function (btn, index) {
      btn.addEventListener("click", function (e) {
        var targetClick = true;
        predictBtns.forEach(function (predictBtn) {
          if (predictBtn.classList === e.target.classList) {
            targetClick = false;
          }
          return targetClick;
        });
        if (targetClick) {
          showPopup(popups, overlay, index);
          return currentCard = btn;
        }
      });
    });
  }
  setPopupWinLose(predictOverlay, winCards, predictPopups, predictBtns);
  setPopupWinLose(predictOverlay, loseCards, predictPopups, predictBtns);
  function setTeam(teams, cardsText, overlay, popups, status) {
    if (status) {
      var cards = [];
      cardsText.forEach(function (item) {
        cards.push(item.parentElement.classList[1]);
      });
      cards.forEach(function (card, i) {
        var key = "selectedTeam-".concat(card, "-").concat(status);
        if (localStorage.getItem(key)) {
          cardsText[i].innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(localStorage.getItem(key));
          cardsText[i].parentElement.parentElement.classList.remove("_select");
          if (cardsText[i].innerText.trim() !== '') {
            cardsText[i].parentElement.parentElement.classList.add("_select");
            cardsText[i].parentElement.parentElement.setAttribute('data-storage', key);
          }
        }
      });
      teams.forEach(function (team) {
        team.addEventListener("click", function (e) {
          // const teamParent = team.parentElement.parentElement;
          var teamName = team.querySelector(".team-name").textContent;
          cards.forEach(function (card, i) {
            if (currentCard === cardsText[i].parentElement) {
              var key = "selectedTeam-".concat(card, "-").concat(status);
              currentCard.parentElement.classList.add("_select");
              currentCard.parentElement.setAttribute('data-storage', key);
              localStorage.setItem(key, "".concat(teamName));
              cardsText[i].innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(teamName);
              overlay.classList.remove("_active");
              popups.forEach(function (popup) {
                return popup.classList.remove("_active");
              });
              document.body.style.overflow = "auto";
            }
          });
        });
      });
    } else {
      var cardsTextLists = [];
      cardsText.forEach(function (item) {
        return cardsTextLists.push(item);
      });
      cardsTextLists.forEach(function (list, listIndex) {
        list.childNodes.forEach(function (item, i) {
          var stage = list.getAttribute("data-stage"),
            key = "selectedTeam-".concat(stage, "-card").concat(++i),
            teamTextBlock = item.querySelector(".".concat(item.classList[0], "-team"));
          teams.forEach(function (team) {
            team.addEventListener("click", function (e) {
              if (item === currentCard) {
                var teamName = team.querySelector(".team-name").textContent;
                currentCard.classList.add("_select");
                currentCard.setAttribute('data-storage', key);
                localStorage.setItem(key, "".concat(teamName));
                // console.log(item)
                teamTextBlock.innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(teamName);
                overlay.classList.remove("_active");
                popups.forEach(function (popup) {
                  return popup.classList.remove("_active");
                });
                document.body.style.overflow = "auto";
              }
            });
          });
          if (localStorage.getItem(key)) {
            console.log("key");
            teamTextBlock.innerHTML = "\u041A\u043E\u043C\u0430\u043D\u0434\u0430 <br> ".concat(localStorage.getItem(key));
            teamTextBlock.parentElement.parentElement.classList.remove("_select");
            if (teamTextBlock.innerText.trim() !== '') {
              teamTextBlock.parentElement.classList.add("_select");
              teamTextBlock.parentElement.setAttribute('data-storage', key);
            }
          }
        });
      });
    }
  }
  setTeam(predictTeams, winCardsTeams, predictOverlay, predictPopups, "win");
  setTeam(predictTeams, loseCardsTeams, predictOverlay, predictPopups, "lose");
  setTeam(predictTeams, predictList, predictOverlay, predictPopups, null);
  function removeTeam(removeBtns, listState) {
    removeBtns.forEach(function (removeBtn) {
      removeBtn.addEventListener("click", function () {
        var btnParent = removeBtn.parentElement.parentElement,
          dataBtn = btnParent.getAttribute("data-storage");

        // console.log(dataBtn)
        if (!dataBtn) {
          btnParent = removeBtn.parentElement;
          dataBtn = btnParent.getAttribute("data-storage");
        }
        localStorage.removeItem(dataBtn);
        btnParent.classList.remove("_select");
      });
    });
  }

  // removeTeam(predictBtns)
  removeTeam(predictBtns);
  stageTabs.forEach(function (tab, tabIndex) {
    tab.addEventListener("click", function (e) {
      stageTabs.forEach(function (tab, i) {
        tab.classList.remove("_active");
      });
      stageWraps.forEach(function (item, stageIndex) {
        item.classList.remove("_active");
        if (tabIndex === stageIndex) {
          item.classList.add("_active");
          if (item.classList.contains("stage3")) {
            item.parentElement.classList.add('stage3');
          } else {
            item.parentElement.classList.remove('stage3');
          }
        }
      });
      e.target.classList.add("_active");
    });
  });

  // countdown timer
  function startCountdown(element) {
    var targetDate = new Date(element.getAttribute('data-target-date'));
    function updateCountdown() {
      var now = new Date(),
        difference = targetDate - now;
      if (difference <= 0) {
        element.querySelector('.predict__info-lock-countdown').textContent = "time over";
        clearInterval(countdownInterval);
        return;
      }
      var days = Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours = Math.floor(difference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),
        minutes = Math.floor(difference % (1000 * 60 * 60) / (1000 * 60));
      element.querySelector('.predict__info-lock-days').textContent = days;
      element.querySelector('.predict__info-lock-hours').textContent = hours;
      element.querySelector('.predict__info-lock-minutes').textContent = minutes;
    }
    var countdownInterval = setInterval(updateCountdown, 60000);
    updateCountdown();
  }
  document.querySelectorAll('.predict__info-lock-countdown').forEach(startCountdown);

  // custom horizontal scroll
  var scrollBar = document.querySelector(".table__scrollbar"),
    scrollBarThumb = document.querySelector(".table__scrollbar-thumb"),
    scrollElem = document.querySelector('.table__wrap-scroll'),
    scrollContainer = document.querySelector('.table__wrap');
  var scrollBarWidth = scrollContainer.clientWidth - 50,
    scrollBarThumbWidth;
  if (scrollElem.clientWidth <= scrollContainer.clientWidth) {
    scrollBar.style.display = "none";
  } else {
    scrollBar.style.display = "block";
    scrollBarThumbWidth = (scrollBarWidth * scrollContainer.clientWidth - 50) / scrollElem.scrollWidth;
    scrollBarThumb.style.width = "".concat(scrollBarThumbWidth, "px");
    scrollBar.style.width = "".concat(scrollBarWidth, "px");
  }
  var currentScrollDistance = 0;
  scrollContainer.addEventListener("scroll", function () {
    currentScrollDistance = scrollContainer.scrollLeft * 100 / scrollContainer.clientWidth;
    scrollBarThumb.style.left = "".concat(scrollBarThumbWidth / 100 * currentScrollDistance - 5, "px");
  });
  // typewright text anim
  function dynamicTypewriter(element, speed, callback) {
    var textArray = element.textContent.trim().split(' ');
    var litArr = textArray.join(' ').split(/(\s+)/).filter(function (_char) {
      return _char.trim() !== '' || _char === ' ';
    });
    var wordIndex = 0;
    var charIndex = 0;
    var currentText = '';
    element.classList.add("_opacity");
    function typeWord() {
      if (wordIndex === litArr.length) {
        element.classList.remove('typewriter-cursor');
        return;
      }
      var currentWord = textArray[wordIndex];
      if (currentWord === undefined) return;
      if (charIndex < currentWord.length) {
        currentText += currentWord.charAt(charIndex);
        element.innerText = currentText;
        charIndex++;
        setTimeout(typeWord, speed);
      } else {
        currentText += ' ';
        element.innerText = currentText;
        charIndex = 0;
        wordIndex++;
        setTimeout(typeWord, speed);
      }
    }
    element.classList.add('typewriter-cursor');
    typeWord();
  }
  function observeElements(typeElems) {
    var options = {
      root: null,
      threshold: 0.5
    };
    var observer = new IntersectionObserver(function (entries, observer) {
      entries.forEach(function (entry, i) {
        if (entry.isIntersecting) {
          dynamicTypewriter(entry.target, 35, function () {});
          observer.unobserve(entry.target);
        }
      });
    }, options);
    typeElems.forEach(function (item) {
      observer.observe(item);
    });
  }
  var typeAnim = document.querySelectorAll('.type-anim');
  observeElements(typeAnim);

  // for test
  function changeStage(stageBlocks, btn) {
    var stage = 0;
    stageBlocks = document.querySelectorAll("".concat(stageBlocks));
    btn.addEventListener("click", function () {
      // Додаємо один слухач події до кнопки
      stageBlocks.forEach(function (block) {
        var container = block.parentElement;
        container.querySelectorAll(".predict__win").forEach(function (item) {
          item.classList.remove("_select");
        });

        // Перевірка на клас _open
        if (block.classList.contains("_open")) {
          block.classList.remove("_open");
          block.classList.add("_done");
        }
        // Перевірка на клас _done
        else if (block.classList.contains("_done")) {
          container.classList.remove("_open");
          block.classList.remove("_done");
          block.classList.add("_lock");
        }
        // Перевірка на клас _lock
        else if (block.classList.contains("_lock")) {
          block.classList.remove("_lock");
          block.classList.add("_open");
          container.classList.remove("_open");
        }

        // Обробка блоку з класом stage3
        if (block.classList.contains("stage3") && block.classList.contains("_done")) {
          container.classList.add("_open");
        }
        if (block.classList.contains("stage3") && block.classList.contains("_open")) {
          container.classList.add("_open");
          // console.log(container.querySelectorAll(".predict__win")[2]);
        }
      });
    });
  }

  changeStage(".predict__stage.stage1", document.querySelector('.stageBtn'));
  changeStage(".predict__stage.stage2", document.querySelector('.stageBtn2'));
  changeStage(".predict__stage.stage3", document.querySelector('.stageBtn3'));
  document.querySelector(".dark-btn").addEventListener("click", function () {
    document.body.classList.toggle("dark");
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJzdGFnZVRhYnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic3RhZ2VXcmFwcyIsImxvc2VDYXJkcyIsImxvc2VDYXJkc1RlYW1zIiwid2luQ2FyZHMiLCJ3aW5DYXJkc1RlYW1zIiwicHJlZGljdE92ZXJsYXkiLCJxdWVyeVNlbGVjdG9yIiwicHJlZGljdFBvcHVwcyIsInByZWRpY3RUZWFtcyIsInByZWRpY3RCdG5zIiwicHJlZGljdExpc3QiLCJwcmVkaWN0TGlzdEl0ZW0iLCJjdXJyZW50Q2FyZCIsInNldFBvcHVwIiwib3ZlcmxheSIsImJ0bnMiLCJwb3B1cHMiLCJidG5XcmFwcyIsImZvckVhY2giLCJidG4iLCJpIiwiZSIsInRhcmdldENsaWNrIiwicHJlZGljdEJ0biIsInN0b3JhZ2VEYXRhIiwidGFyZ2V0IiwicGFyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImluZGV4Iiwid3JhcCIsInNob3dQb3B1cCIsInBvcHVwIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwiYm9keSIsInN0eWxlIiwib3ZlcmZsb3ciLCJjbG9zZUJ0biIsIm9uY2UiLCJzZXRQb3B1cFdpbkxvc2UiLCJzZXRUZWFtIiwidGVhbXMiLCJjYXJkc1RleHQiLCJzdGF0dXMiLCJjYXJkcyIsIml0ZW0iLCJwdXNoIiwiY2FyZCIsImtleSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJpbm5lckhUTUwiLCJpbm5lclRleHQiLCJ0cmltIiwic2V0QXR0cmlidXRlIiwidGVhbSIsInRlYW1OYW1lIiwidGV4dENvbnRlbnQiLCJzZXRJdGVtIiwiY2FyZHNUZXh0TGlzdHMiLCJsaXN0IiwibGlzdEluZGV4IiwiY2hpbGROb2RlcyIsInN0YWdlIiwidGVhbVRleHRCbG9jayIsImNvbnNvbGUiLCJsb2ciLCJyZW1vdmVUZWFtIiwicmVtb3ZlQnRucyIsImxpc3RTdGF0ZSIsInJlbW92ZUJ0biIsImJ0blBhcmVudCIsImRhdGFCdG4iLCJyZW1vdmVJdGVtIiwidGFiIiwidGFiSW5kZXgiLCJzdGFnZUluZGV4IiwiY29udGFpbnMiLCJzdGFydENvdW50ZG93biIsImVsZW1lbnQiLCJ0YXJnZXREYXRlIiwiRGF0ZSIsInVwZGF0ZUNvdW50ZG93biIsIm5vdyIsImRpZmZlcmVuY2UiLCJjbGVhckludGVydmFsIiwiY291bnRkb3duSW50ZXJ2YWwiLCJkYXlzIiwiTWF0aCIsImZsb29yIiwiaG91cnMiLCJtaW51dGVzIiwic2V0SW50ZXJ2YWwiLCJzY3JvbGxCYXIiLCJzY3JvbGxCYXJUaHVtYiIsInNjcm9sbEVsZW0iLCJzY3JvbGxDb250YWluZXIiLCJzY3JvbGxCYXJXaWR0aCIsImNsaWVudFdpZHRoIiwic2Nyb2xsQmFyVGh1bWJXaWR0aCIsImRpc3BsYXkiLCJzY3JvbGxXaWR0aCIsIndpZHRoIiwiY3VycmVudFNjcm9sbERpc3RhbmNlIiwic2Nyb2xsTGVmdCIsImxlZnQiLCJkeW5hbWljVHlwZXdyaXRlciIsInNwZWVkIiwiY2FsbGJhY2siLCJ0ZXh0QXJyYXkiLCJzcGxpdCIsImxpdEFyciIsImpvaW4iLCJmaWx0ZXIiLCJfY2hhciIsIndvcmRJbmRleCIsImNoYXJJbmRleCIsImN1cnJlbnRUZXh0IiwidHlwZVdvcmQiLCJsZW5ndGgiLCJjdXJyZW50V29yZCIsInVuZGVmaW5lZCIsImNoYXJBdCIsInNldFRpbWVvdXQiLCJvYnNlcnZlRWxlbWVudHMiLCJ0eXBlRWxlbXMiLCJvcHRpb25zIiwicm9vdCIsInRocmVzaG9sZCIsIm9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsInVub2JzZXJ2ZSIsIm9ic2VydmUiLCJ0eXBlQW5pbSIsImNoYW5nZVN0YWdlIiwic3RhZ2VCbG9ja3MiLCJibG9jayIsImNvbnRhaW5lciIsInRvZ2ds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QUFTLENBQUM4QyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUk4RCxLQUFLLENBQUM1RyxTQUFTLENBQUM4QyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUc7VUFDMUUrRCxTQUFTLENBQUM3RyxTQUFTLENBQUNFLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDcEM7UUFDQSxJQUFJMEcsS0FBSyxDQUFDNUcsU0FBUyxDQUFDOEMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJOEQsS0FBSyxDQUFDNUcsU0FBUyxDQUFDOEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFHO1VBQzFFK0QsU0FBUyxDQUFDN0csU0FBUyxDQUFDRSxHQUFHLENBQUMsT0FBTyxDQUFDO1VBQ2hDO1FBQ0o7TUFDSixDQUFDLENBQUM7SUFDTixDQUFDLENBQUM7RUFDTjs7RUFFQXdHLFdBQVcsQ0FBQyx3QkFBd0IsRUFBRWxKLFFBQVEsQ0FBQ2EsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0VBQzFFcUksV0FBVyxDQUFDLHdCQUF3QixFQUFFbEosUUFBUSxDQUFDYSxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7RUFDM0VxSSxXQUFXLENBQUMsd0JBQXdCLEVBQUVsSixRQUFRLENBQUNhLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztFQUczRWIsUUFBUSxDQUFDYSxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUNaLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFLO0lBQy9ERCxRQUFRLENBQUMyQyxJQUFJLENBQUNILFNBQVMsQ0FBQzhHLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0FBRU4sQ0FBQyxDQUFDIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKT0+e1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgKCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpKTtcblxuICAgIGNvbnN0IHN0YWdlVGFicyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fdGFicy1pdGVtXCIpLFxuICAgICAgICAgIHN0YWdlV3JhcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByZWRpY3RfX3N0YWdlXCIpLFxuICAgICAgICAgIGxvc2VDYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fbG9zZS1jYXJkXCIpLFxuICAgICAgICAgIGxvc2VDYXJkc1RlYW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcmVkaWN0X19sb3NlLXRlYW1cIiksXG4gICAgICAgICAgd2luQ2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByZWRpY3RfX3dpbi1jYXJkXCIpLFxuICAgICAgICAgIHdpbkNhcmRzVGVhbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByZWRpY3RfX3dpbi10ZWFtXCIpLFxuICAgICAgICAgIHByZWRpY3RPdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcmVkaWN0X19vdmVybGF5XCIpLFxuICAgICAgICAgIHByZWRpY3RQb3B1cHMgPSBwcmVkaWN0T3ZlcmxheS5xdWVyeVNlbGVjdG9yQWxsKFwiLnByZWRpY3RfX3RlYW1zXCIpLFxuICAgICAgICAgIHByZWRpY3RUZWFtcyA9IHByZWRpY3RPdmVybGF5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fdGVhbXMtaXRlbVwiKSxcbiAgICAgICAgICBwcmVkaWN0QnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2FyZHMtYnRuXCIpLFxuICAgICAgICAgIHByZWRpY3RMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcmVkaWN0X19saXN0XCIpLFxuICAgICAgICAgIHByZWRpY3RMaXN0SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fbGlzdC1pdGVtXCIpXG5cbiAgICAvLyBjb25zb2xlLmxvZyhwcmVkaWN0QnRucylcblxuICAgIGxldCBjdXJyZW50Q2FyZDtcbiAgICAvLyBsZXQgc2V0U3RhdHVzO1xuXG5cbiAgICBmdW5jdGlvbiBzZXRQb3B1cChvdmVybGF5LCBidG5zLCBwb3B1cHMsICBidG5XcmFwcykge1xuICAgICAgICBidG5zLmZvckVhY2goKGJ0biwgaSkgPT4ge1xuICAgICAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwcmVkaWN0QnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2FyZHMtYnRuXCIpLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRDbGljayA9IHRydWVcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwcmVkaWN0QnRucylcbiAgICAgICAgICAgICAgICBwcmVkaWN0QnRucy5mb3JFYWNoKHByZWRpY3RCdG4gPT57XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdG9yYWdlRGF0YSA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdG9yYWdlXCIpXG4gICAgICAgICAgICAgICAgICAgIGlmKHByZWRpY3RCdG4gPT09IGUudGFyZ2V0ICYmIHN0b3JhZ2VEYXRhICE9PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENsaWNrID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zdG9yYWdlXCIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldENsaWNrXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZih0YXJnZXRDbGljayl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYnRuV3JhcHMuZm9yRWFjaCgod3JhcCwgaSkgPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihidG4ucGFyZW50RWxlbWVudCA9PT0gd3JhcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID0gaVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBzaG93UG9wdXAocG9wdXBzLCBvdmVybGF5LCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDYXJkID0gYnRuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFBvcHVwKHByZWRpY3RPdmVybGF5LCBwcmVkaWN0TGlzdEl0ZW0sIHByZWRpY3RQb3B1cHMsIHByZWRpY3RMaXN0KVxuXG5cbiAgICBmdW5jdGlvbiBzaG93UG9wdXAocG9wdXBzLCBvdmVybGF5LCBpbmRleCl7XG4gICAgICAgIHBvcHVwcy5mb3JFYWNoKHBvcHVwID0+IHBvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJfYWN0aXZlXCIpKTtcbiAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKFwiX2FjdGl2ZVwiKTtcbiAgICAgICAgcG9wdXBzW2luZGV4XS5jbGFzc0xpc3QuYWRkKFwiX2FjdGl2ZVwiKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCJcbiAgICAgICAgY29uc3QgY2xvc2VCdG4gPSBwb3B1cHNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoXCIucHJlZGljdF9fdGVhbXMtY2xvc2VcIik7XG4gICAgICAgIGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBvdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoXCJfYWN0aXZlXCIpO1xuICAgICAgICAgICAgcG9wdXBzW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImF1dG9cIlxuICAgICAgICB9LCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UG9wdXBXaW5Mb3NlKG92ZXJsYXksIGJ0bnMsIHBvcHVwcywgcHJlZGljdEJ0bnMpIHtcbiAgICAgICAgYnRucy5mb3JFYWNoKChidG4sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldENsaWNrID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHByZWRpY3RCdG5zLmZvckVhY2gocHJlZGljdEJ0biA9PntcbiAgICAgICAgICAgICAgICAgICAgaWYocHJlZGljdEJ0bi5jbGFzc0xpc3QgPT09IGUudGFyZ2V0LmNsYXNzTGlzdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDbGljayA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldENsaWNrXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZih0YXJnZXRDbGljayl7XG4gICAgICAgICAgICAgICAgICAgIHNob3dQb3B1cChwb3B1cHMsIG92ZXJsYXksIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudENhcmQgPSBidG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldFBvcHVwV2luTG9zZShwcmVkaWN0T3ZlcmxheSwgd2luQ2FyZHMsIHByZWRpY3RQb3B1cHMsIHByZWRpY3RCdG5zKVxuICAgIHNldFBvcHVwV2luTG9zZShwcmVkaWN0T3ZlcmxheSwgbG9zZUNhcmRzLCBwcmVkaWN0UG9wdXBzLCBwcmVkaWN0QnRucylcblxuXG5cbiAgICBmdW5jdGlvbiBzZXRUZWFtKHRlYW1zLCBjYXJkc1RleHQsIG92ZXJsYXksIHBvcHVwcywgc3RhdHVzKSB7XG4gICAgICAgIGlmKHN0YXR1cyl7XG4gICAgICAgICAgICBsZXQgY2FyZHMgPSBbXTtcbiAgICAgICAgICAgIGNhcmRzVGV4dC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIGNhcmRzLnB1c2goaXRlbS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdFsxXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhcmRzLmZvckVhY2goKGNhcmQsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gYHNlbGVjdGVkVGVhbS0ke2NhcmR9LSR7c3RhdHVzfWA7XG4gICAgICAgICAgICAgICAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSl7XG4gICAgICAgICAgICAgICAgICAgIGNhcmRzVGV4dFtpXS5pbm5lckhUTUwgPSBg0JrQvtC80LDQvdC00LAgPGJyPiAke2xvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSl9YDtcbiAgICAgICAgICAgICAgICAgICAgY2FyZHNUZXh0W2ldLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiX3NlbGVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBpZihjYXJkc1RleHRbaV0uaW5uZXJUZXh0LnRyaW0oKSAhPT0gJycpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZHNUZXh0W2ldLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiX3NlbGVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZHNUZXh0W2ldLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RvcmFnZScsIGtleSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0ZWFtcy5mb3JFYWNoKCh0ZWFtKSA9PiB7XG4gICAgICAgICAgICAgICAgdGVhbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgdGVhbVBhcmVudCA9IHRlYW0ucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZWFtTmFtZSA9IHRlYW0ucXVlcnlTZWxlY3RvcihcIi50ZWFtLW5hbWVcIikudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNhcmRzLmZvckVhY2goKGNhcmQsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Q2FyZCA9PT0gY2FyZHNUZXh0W2ldLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQga2V5ID0gYHNlbGVjdGVkVGVhbS0ke2NhcmR9LSR7c3RhdHVzfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENhcmQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiX3NlbGVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDYXJkLnBhcmVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXN0b3JhZ2UnLCBrZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBgJHt0ZWFtTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkc1RleHRbaV0uaW5uZXJIVE1MID0gYNCa0L7QvNCw0L3QtNCwIDxicj4gJHt0ZWFtTmFtZX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZShcIl9hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBzLmZvckVhY2gocG9wdXAgPT4gcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcIl9hY3RpdmVcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImF1dG9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBsZXQgY2FyZHNUZXh0TGlzdHMgPSBbXVxuICAgICAgICAgICAgY2FyZHNUZXh0LmZvckVhY2goaXRlbSA9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FyZHNUZXh0TGlzdHMucHVzaChpdGVtKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGNhcmRzVGV4dExpc3RzLmZvckVhY2goKGxpc3QsIGxpc3RJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGxpc3QuY2hpbGROb2Rlcy5mb3JFYWNoKChpdGVtLCBpKSA9PntcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YWdlID0gbGlzdC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN0YWdlXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gYHNlbGVjdGVkVGVhbS0ke3N0YWdlfS1jYXJkJHsrK2l9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlYW1UZXh0QmxvY2sgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoYC4ke2l0ZW0uY2xhc3NMaXN0WzBdfS10ZWFtYClcbiAgICAgICAgICAgICAgICAgICAgdGVhbXMuZm9yRWFjaCgodGVhbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVhbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtID09PSBjdXJyZW50Q2FyZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlYW1OYW1lID0gdGVhbS5xdWVyeVNlbGVjdG9yKFwiLnRlYW0tbmFtZVwiKS50ZXh0Q29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2FyZC5jbGFzc0xpc3QuYWRkKFwiX3NlbGVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2FyZC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RvcmFnZScsIGtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBgJHt0ZWFtTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVhbVRleHRCbG9jay5pbm5lckhUTUwgPSBg0JrQvtC80LDQvdC00LAgPGJyPiAke3RlYW1OYW1lfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZShcIl9hY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwcy5mb3JFYWNoKHBvcHVwID0+IHBvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJfYWN0aXZlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiYXV0b1wiXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJrZXlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlYW1UZXh0QmxvY2suaW5uZXJIVE1MID0gYNCa0L7QvNCw0L3QtNCwIDxicj4gJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWFtVGV4dEJsb2NrLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiX3NlbGVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGVhbVRleHRCbG9jay5pbm5lclRleHQudHJpbSgpICE9PSAnJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVhbVRleHRCbG9jay5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJfc2VsZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVhbVRleHRCbG9jay5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zdG9yYWdlJywga2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcblxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfVxuICAgIHNldFRlYW0ocHJlZGljdFRlYW1zLCB3aW5DYXJkc1RlYW1zLCBwcmVkaWN0T3ZlcmxheSwgcHJlZGljdFBvcHVwcywgXCJ3aW5cIik7XG4gICAgc2V0VGVhbShwcmVkaWN0VGVhbXMsIGxvc2VDYXJkc1RlYW1zLCBwcmVkaWN0T3ZlcmxheSwgcHJlZGljdFBvcHVwcywgXCJsb3NlXCIpO1xuICAgIHNldFRlYW0ocHJlZGljdFRlYW1zLCBwcmVkaWN0TGlzdCwgcHJlZGljdE92ZXJsYXksIHByZWRpY3RQb3B1cHMsIG51bGwpO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlVGVhbShyZW1vdmVCdG5zLCBsaXN0U3RhdGUpe1xuICAgICAgICByZW1vdmVCdG5zLmZvckVhY2gocmVtb3ZlQnRuID0+e1xuICAgICAgICAgICAgcmVtb3ZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PntcbiAgICAgICAgICAgICAgICBsZXQgYnRuUGFyZW50ID0gIHJlbW92ZUJ0bi5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFCdG4gPSBidG5QYXJlbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdG9yYWdlXCIpXG5cbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhQnRuKVxuICAgICAgICAgICAgICAgIGlmKCFkYXRhQnRuKXtcbiAgICAgICAgICAgICAgICAgICAgYnRuUGFyZW50ID0gcmVtb3ZlQnRuLnBhcmVudEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgZGF0YUJ0biA9IGJ0blBhcmVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN0b3JhZ2VcIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZGF0YUJ0bilcbiAgICAgICAgICAgICAgICBidG5QYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShcIl9zZWxlY3RcIilcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyByZW1vdmVUZWFtKHByZWRpY3RCdG5zKVxuICAgIHJlbW92ZVRlYW0ocHJlZGljdEJ0bnMpXG5cbiAgICBzdGFnZVRhYnMuZm9yRWFjaCgodGFiLCB0YWJJbmRleCkgPT57XG4gICAgICAgIHRhYi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+e1xuICAgICAgICAgICAgc3RhZ2VUYWJzLmZvckVhY2goKHRhYiwgaSkgPT57XG4gICAgICAgICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHN0YWdlV3JhcHMuZm9yRWFjaCgoaXRlbSwgc3RhZ2VJbmRleCkgPT57XG4gICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwiX2FjdGl2ZVwiKVxuICAgICAgICAgICAgICAgIGlmKHRhYkluZGV4ID09PSBzdGFnZUluZGV4KXtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKFwiX2FjdGl2ZVwiKVxuICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmNsYXNzTGlzdC5jb250YWlucyhcInN0YWdlM1wiKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc3RhZ2UzJylcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc3RhZ2UzJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiX2FjdGl2ZVwiKVxuICAgICAgICB9KVxuICAgIH0pXG5cbi8vIGNvdW50ZG93biB0aW1lclxuICAgIGZ1bmN0aW9uIHN0YXJ0Q291bnRkb3duKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0RGF0ZSA9IG5ldyBEYXRlKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldC1kYXRlJykpXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZG93bigpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICBkaWZmZXJlbmNlID0gdGFyZ2V0RGF0ZSAtIG5vd1xuICAgICAgICAgICAgaWYgKGRpZmZlcmVuY2UgPD0gMCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucXVlcnlTZWxlY3RvcignLnByZWRpY3RfX2luZm8tbG9jay1jb3VudGRvd24nKS50ZXh0Q29udGVudCA9IFwidGltZSBvdmVyXCJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGNvdW50ZG93bkludGVydmFsKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGF5cyA9IE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSksXG4gICAgICAgICAgICAgICAgICBob3VycyA9IE1hdGguZmxvb3IoKGRpZmZlcmVuY2UgJSAoMTAwMCAqIDYwICogNjAgKiAyNCkpIC8gKDEwMDAgKiA2MCAqIDYwKSksXG4gICAgICAgICAgICAgICAgICBtaW51dGVzID0gTWF0aC5mbG9vcigoZGlmZmVyZW5jZSAlICgxMDAwICogNjAgKiA2MCkpIC8gKDEwMDAgKiA2MCkpXG4gICAgICAgICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmVkaWN0X19pbmZvLWxvY2stZGF5cycpLnRleHRDb250ZW50ID0gZGF5c1xuICAgICAgICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucHJlZGljdF9faW5mby1sb2NrLWhvdXJzJykudGV4dENvbnRlbnQgPSBob3Vyc1xuICAgICAgICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucHJlZGljdF9faW5mby1sb2NrLW1pbnV0ZXMnKS50ZXh0Q29udGVudCA9IG1pbnV0ZXNcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb3VudGRvd25JbnRlcnZhbCA9IHNldEludGVydmFsKHVwZGF0ZUNvdW50ZG93biwgNjAwMDApXG4gICAgICAgIHVwZGF0ZUNvdW50ZG93bigpXG4gICAgfVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcmVkaWN0X19pbmZvLWxvY2stY291bnRkb3duJykuZm9yRWFjaChzdGFydENvdW50ZG93bilcblxuICAgIC8vIGN1c3RvbSBob3Jpem9udGFsIHNjcm9sbFxuICAgIGNvbnN0IHNjcm9sbEJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFibGVfX3Njcm9sbGJhclwiKSxcbiAgICAgICAgICBzY3JvbGxCYXJUaHVtYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFibGVfX3Njcm9sbGJhci10aHVtYlwiKSxcbiAgICAgICAgICBzY3JvbGxFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhYmxlX193cmFwLXNjcm9sbCcpLFxuICAgICAgICAgIHNjcm9sbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YWJsZV9fd3JhcCcpXG5cbiAgICBsZXQgc2Nyb2xsQmFyV2lkdGggPSBzY3JvbGxDb250YWluZXIuY2xpZW50V2lkdGggLSA1MCxcbiAgICAgICAgc2Nyb2xsQmFyVGh1bWJXaWR0aDtcblxuICAgIGlmIChzY3JvbGxFbGVtLmNsaWVudFdpZHRoIDw9IHNjcm9sbENvbnRhaW5lci5jbGllbnRXaWR0aCkge1xuICAgICAgICBzY3JvbGxCYXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2Nyb2xsQmFyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCJcbiAgICAgICAgc2Nyb2xsQmFyVGh1bWJXaWR0aCA9IChzY3JvbGxCYXJXaWR0aCAqIHNjcm9sbENvbnRhaW5lci5jbGllbnRXaWR0aCAtIDUwKSAvIHNjcm9sbEVsZW0uc2Nyb2xsV2lkdGhcbiAgICAgICAgc2Nyb2xsQmFyVGh1bWIuc3R5bGUud2lkdGggPSBgJHtzY3JvbGxCYXJUaHVtYldpZHRofXB4YFxuICAgICAgICBzY3JvbGxCYXIuc3R5bGUud2lkdGggPSBgJHtzY3JvbGxCYXJXaWR0aH1weGBcbiAgICB9XG5cbiAgICBsZXQgY3VycmVudFNjcm9sbERpc3RhbmNlID0gMFxuXG4gICAgc2Nyb2xsQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgKCkgPT4ge1xuICAgICAgICBjdXJyZW50U2Nyb2xsRGlzdGFuY2UgPSAoc2Nyb2xsQ29udGFpbmVyLnNjcm9sbExlZnQgKiAxMDApIC8gc2Nyb2xsQ29udGFpbmVyLmNsaWVudFdpZHRoXG4gICAgICAgIHNjcm9sbEJhclRodW1iLnN0eWxlLmxlZnQgPSBgJHsoc2Nyb2xsQmFyVGh1bWJXaWR0aCAvIDEwMCkgKiBjdXJyZW50U2Nyb2xsRGlzdGFuY2UgLSA1fXB4YFxuICAgIH0pO1xuLy8gdHlwZXdyaWdodCB0ZXh0IGFuaW1cbiAgICBmdW5jdGlvbiBkeW5hbWljVHlwZXdyaXRlcihlbGVtZW50LCBzcGVlZCwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgdGV4dEFycmF5ID0gZWxlbWVudC50ZXh0Q29udGVudC50cmltKCkuc3BsaXQoJyAnKTtcbiAgICAgICAgY29uc3QgbGl0QXJyID0gdGV4dEFycmF5LmpvaW4oJyAnKS5zcGxpdCgvKFxccyspLykuZmlsdGVyKGZ1bmN0aW9uIChfY2hhcikge1xuICAgICAgICAgICAgcmV0dXJuIF9jaGFyLnRyaW0oKSAhPT0gJycgfHwgX2NoYXIgPT09ICcgJztcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB3b3JkSW5kZXggPSAwO1xuICAgICAgICBsZXQgY2hhckluZGV4ID0gMDtcbiAgICAgICAgbGV0IGN1cnJlbnRUZXh0ID0gJyc7XG5cbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiX29wYWNpdHlcIilcblxuICAgICAgICBmdW5jdGlvbiB0eXBlV29yZCgpIHtcbiAgICAgICAgICAgIGlmICh3b3JkSW5kZXggPT09IGxpdEFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3R5cGV3cml0ZXItY3Vyc29yJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY3VycmVudFdvcmQgPSB0ZXh0QXJyYXlbd29yZEluZGV4XTtcblxuICAgICAgICAgICAgaWYoY3VycmVudFdvcmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuXG5cbiAgICAgICAgICAgIGlmIChjaGFySW5kZXggPCBjdXJyZW50V29yZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGV4dCArPSBjdXJyZW50V29yZC5jaGFyQXQoY2hhckluZGV4KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmlubmVyVGV4dCA9IGN1cnJlbnRUZXh0O1xuICAgICAgICAgICAgICAgIGNoYXJJbmRleCsrO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodHlwZVdvcmQsIHNwZWVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRleHQgKz0gJyAnO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJUZXh0ID0gY3VycmVudFRleHQ7XG4gICAgICAgICAgICAgICAgY2hhckluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB3b3JkSW5kZXgrKztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHR5cGVXb3JkLCBzcGVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCd0eXBld3JpdGVyLWN1cnNvcicpO1xuICAgICAgICB0eXBlV29yZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9ic2VydmVFbGVtZW50cyh0eXBlRWxlbXMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJvb3Q6IG51bGwsXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IDAuNVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnksIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1R5cGV3cml0ZXIoZW50cnkudGFyZ2V0LCAzNSwgKCkgPT4ge30pO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgIHR5cGVFbGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHR5cGVBbmltID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnR5cGUtYW5pbScpO1xuICAgIG9ic2VydmVFbGVtZW50cyh0eXBlQW5pbSk7XG5cbi8vIGZvciB0ZXN0XG4gICAgZnVuY3Rpb24gY2hhbmdlU3RhZ2Uoc3RhZ2VCbG9ja3MsIGJ0bikge1xuICAgICAgICBsZXQgc3RhZ2UgPSAwO1xuICAgICAgICBzdGFnZUJsb2NrcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCR7c3RhZ2VCbG9ja3N9YCk7XG5cbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7IC8vINCU0L7QtNCw0ZTQvNC+INC+0LTQuNC9INGB0LvRg9GF0LDRhyDQv9C+0LTRltGXINC00L4g0LrQvdC+0L/QutC4XG4gICAgICAgICAgICBzdGFnZUJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY29udGFpbmVyID0gYmxvY2sucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5wcmVkaWN0X193aW5cIikuZm9yRWFjaChpdGVtID0+e1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJfc2VsZWN0XCIpXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIC8vINCf0LXRgNC10LLRltGA0LrQsCDQvdCwINC60LvQsNGBIF9vcGVuXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLmNsYXNzTGlzdC5jb250YWlucyhcIl9vcGVuXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoXCJfb3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suY2xhc3NMaXN0LmFkZChcIl9kb25lXCIpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vINCf0LXRgNC10LLRltGA0LrQsCDQvdCwINC60LvQsNGBIF9kb25lXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKFwiX2RvbmVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJfb3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suY2xhc3NMaXN0LnJlbW92ZShcIl9kb25lXCIpO1xuICAgICAgICAgICAgICAgICAgICBibG9jay5jbGFzc0xpc3QuYWRkKFwiX2xvY2tcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vINCf0LXRgNC10LLRltGA0LrQsCDQvdCwINC60LvQsNGBIF9sb2NrXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKFwiX2xvY2tcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suY2xhc3NMaXN0LnJlbW92ZShcIl9sb2NrXCIpO1xuICAgICAgICAgICAgICAgICAgICBibG9jay5jbGFzc0xpc3QuYWRkKFwiX29wZW5cIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwiX29wZW5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8g0J7QsdGA0L7QsdC60LAg0LHQu9C+0LrRgyDQtyDQutC70LDRgdC+0Lwgc3RhZ2UzXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLmNsYXNzTGlzdC5jb250YWlucyhcInN0YWdlM1wiKSAmJiBibG9jay5jbGFzc0xpc3QuY29udGFpbnMoXCJfZG9uZVwiKSApIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJfb3BlblwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLmNsYXNzTGlzdC5jb250YWlucyhcInN0YWdlM1wiKSAmJiBibG9jay5jbGFzc0xpc3QuY29udGFpbnMoXCJfb3BlblwiKSApIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJfb3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJlZGljdF9fd2luXCIpWzJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2hhbmdlU3RhZ2UoXCIucHJlZGljdF9fc3RhZ2Uuc3RhZ2UxXCIsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGFnZUJ0bicpKTtcbiAgICBjaGFuZ2VTdGFnZShcIi5wcmVkaWN0X19zdGFnZS5zdGFnZTJcIiwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0YWdlQnRuMicpKTtcbiAgICBjaGFuZ2VTdGFnZShcIi5wcmVkaWN0X19zdGFnZS5zdGFnZTNcIiwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0YWdlQnRuMycpKTtcblxuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kYXJrLWJ0blwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT57XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnRvZ2dsZShcImRhcmtcIilcbiAgICB9KVxuXG59KVxuXG5cblxuIl19
